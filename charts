import pandas_datareader.data as pdr
import datetime
import matplotlib.pyplot as plt
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')

start = datetime.datetime(2015,8,1)
end   = datetime.datetime(2022,1,1)

apple = pdr.DataReader('AAPL','yahoo',start,end)
amd = pdr.DataReader('AMD','yahoo',start,end)
alibaba = pdr.DataReader('BABA','yahoo',start,end)

apple.to_csv('Apple_Stock.csv')
amd.to_csv('AMD_Stock.csv')
alibaba.to_csv('Alibaba_Stock.csv')

apple['Open'].plot(figsize=(15,7), label = 'Apple Stock Prices')
amd['Open'].plot(label = 'AMD Stock Prices')
alibaba['Open'].plot(label = 'Alibaba Group Stock Prices')
plt.title('Stock Prices of Apple, Alibaba Group and AMD', fontsize = 18)
plt.ylabel('Price', fontsize = 14)
plt.xlabel('Date', fontsize = 14)
plt.legend()
plt.show()

# Volume Traded
apple['Volume'].plot(figsize=(15,7), label = 'Apple')
alibaba['Volume'].plot(label = 'Alibaba Group')
amd['Volume'].plot(label = 'AMD')
plt.title('Volume', fontsize = 16)
plt.legend()
plt.show()

apple['Total Traded'] = apple['Open'] * apple['Volume']
amd['Total Traded'] = amd['Open'] * amd['Volume']
alibaba['Total Traded'] = alibaba['Open'] * alibaba['Volume']
apple['Total Traded'].plot(figsize=(15,7), label='Apple')
amd['Total Traded'].plot(label='AMD')
alibaba['Total Traded'].plot(label='Alibaba Group')
plt.title('Total Traded', fontsize = 16)
plt.legend()
plt.ylabel('Total Traded')
plt.show()

apple['Total Traded'].argmax()

apple.iloc[[apple['Total Traded'].argmax()]]

apple['Open'].plot(figsize = (15,7), label = 'No moving average')
apple['MA50'] = apple['Open'].rolling(50).mean()
apple['MA50'].plot(label = 'MA50')
apple['MA200'] = apple['Open'].rolling(200).mean()
apple['MA200'].plot(label = 'MA200')
plt.legend()
plt.title('Apple Price', fontsize = 16)
plt.ylabel('Price($)',fontsize = 14)
plt.xlabel('Date',fontsize = 14)
plt.xticks(rotation=0)
plt.show()

from pandas.plotting import scatter_matrix
import pandas as pd

tech_comp = pd.concat([apple['Open'], alibaba['Open'], amd['Open']], axis = 1)
tech_comp.columns = ['Apple Open', 'Alibaba Group Open', 'AMD Open']
scatter_matrix(tech_comp, figsize = (8,8), hist_kwds={'bins':50})
plt.show()

from mpl_finance import candlestick_ohlc
from matplotlib.dates import DateFormatter, date2num, DayLocator, MONDAY
from matplotlib.dates import WeekdayLocator

apple_reset=apple.loc['2020-01':'2020-01'].reset_index()

apple_reset['date_ax'] = apple_reset['Date'].apply(lambda date: date2num(date))

apple_values = [tuple(vals) for  vals in apple_reset[['date_ax', 'Open', 'High', 'Low', 'Close']].values]

mondays = WeekdayLocator(MONDAY)
alldays = DayLocator()
weekFormatter = DateFormatter('%b %d')
dayFormatter = DateFormatter('%d')

fig, ax = plt.subplots()
candlestick_ohlc(ax, apple_values, width = 0.6, colorup = 'g')
plt.show()

# Daily Percentage Change

apple['return'] = (apple['Close']/apple['Close'].shift(1)) - 1
amd['return'] = (amd['Close']/amd['Close'].shift(1)) - 1
alibaba['return'] = (alibaba['Close']/apple['Close'].shift(1)) - 1

apple['return'].hist(bins = 50, label = 'Apple', figsize = (13,6))
amd['return'].hist(bins = 50, label = 'AMD')
alibaba['return'].hist(bins = 50, label = 'Alibaba Group')
plt.legend()
plt.show()

apple['return'].plot(kind = 'kde', label='Apple', figsize=(13,6))
amd['return'].plot(kind = 'kde', label='AMD')
alibaba['return'].plot(kind = 'kde', label='Alibaba Group')
plt.legend()
plt.show()

box_df = pd.concat([apple['return'], amd['return'], alibaba['return']], axis = 1)
box_df.columns=['Apple returns', 'AMD returns', 'Alibaba Group returns']
box_df.plot(kind='box', figsize=(16,6))

scatter_matrix(box_df, figsize=(8,8), hist_kwds={'bins':50}, alpha = 0.25)
plt.show()

# Cumulative Return

apple['Cumulutive Return'] = (1+apple['return']).cumprod()
amd['Cumulutive Return'] = (1+amd['return']).cumprod()
alibaba['Cumulutive Return'] = (1+alibaba['return']).cumprod()

apple['Cumulutive Return'].plot(label='Apple',figsize=(15,7))
amd['Cumulutive Return'].plot(label='AMD')
alibaba['Cumulutive Return'].plot(label='Alibaba Group')
plt.legend()
plt.show()







